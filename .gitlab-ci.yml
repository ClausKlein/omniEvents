.package: &package
  image: ${docker_registry}toa/docker:latest-rpm
  stage: build
  tags:
    - docker
  script:
    - printf "FROM ${docker_registry}toa/rpmbuild:$dist-$arch-onbuild" > Dockerfile
    - if [ -z "$CI_COMMIT_TAG" ]; then
        rpm_release="0.$CI_PIPELINE_ID";
      else
        rpm_release=`rpm --query --queryformat "%{release}\n" --specfile ${namespace}$CI_PROJECT_NAME.spec | head -n 1 | awk -F"." "{print $1}"`;
      fi
    - name=$(echo $CI_PROJECT_NAME| tr '[:upper:]' '[:lower:]')
    - docker login ${docker_registry} -u ${docker_user} -p ${docker_password}
    - docker image build --pull
                             -t $name:latest-$dist-$arch
                             --build-arg "project=omniEvents"
                             --build-arg "rpm_release=$rpm_release"
                             --build-arg "spec_file=omniEvents.spec"
                             --build-arg "arch=$arch" .
    - id=$(docker container create $name:latest-$dist-$arch)
    - docker container cp $id:/root/rpmbuild/RPMS/ output/
    - docker container rm -f $id
    - docker image rm -f $name:latest-$dist-$arch
  artifacts:
    paths:
      - output/*/*.rpm
    expire_in: 2 days

package:el7:
  variables:
    dist: el7
    arch: x86_64
  <<: *package


.s3: &s3
  image: ${docker_registry}toa/rpmbuild:${dist}-${arch}-onbuild
  stage: deploy
  tags:
    - docker
  script:
    - /usr/bin/s3cmd sync s3://${s3_bucket}/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/yum/$CI_COMMIT_REF_NAME/$dist/$arch .
    - mkdir -p $arch
    - for file in `find output -name *.rpm`; do
        cp $file $arch;
      done
    - repomanage --old $arch| xargs rm -f; createrepo --update $arch
    - /usr/bin/s3cmd sync -F -v --delete-removed $arch s3://${s3_bucket}/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/yum/$CI_COMMIT_REF_NAME/$dist/ 

deploy-el7:
  variables:
    dist: el7
    arch: x86_64
  dependencies:
    - package:el7
  <<: *s3

